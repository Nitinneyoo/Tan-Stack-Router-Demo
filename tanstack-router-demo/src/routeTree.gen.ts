/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/Login'
import { Route as FleetImport } from './routes/Fleet'
import { Route as DashboardImport } from './routes/Dashboard'
import { Route as ContactImport } from './routes/Contact'
import { Route as ConfigureImport } from './routes/Configure'
import { Route as IndexImport } from './routes/index'
import { Route as FleetIndexImport } from './routes/Fleet/index'
import { Route as DashboardIndexImport } from './routes/Dashboard/index'
import { Route as ConfigureIndexImport } from './routes/Configure/index'
import { Route as FleetAddRobotImport } from './routes/Fleet/addRobot'
import { Route as DashboardSettingsImport } from './routes/Dashboard/settings'
import { Route as DashboardOverviewImport } from './routes/Dashboard/overview'
import { Route as ConfigureMapImport } from './routes/Configure/map'
import { Route as ConfigureAutomationImport } from './routes/Configure/automation'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/Login',
  path: '/Login',
  getParentRoute: () => rootRoute,
} as any)

const FleetRoute = FleetImport.update({
  id: '/Fleet',
  path: '/Fleet',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/Dashboard',
  path: '/Dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/Contact',
  path: '/Contact',
  getParentRoute: () => rootRoute,
} as any)

const ConfigureRoute = ConfigureImport.update({
  id: '/Configure',
  path: '/Configure',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FleetIndexRoute = FleetIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => FleetRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const ConfigureIndexRoute = ConfigureIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ConfigureRoute,
} as any)

const FleetAddRobotRoute = FleetAddRobotImport.update({
  id: '/addRobot',
  path: '/addRobot',
  getParentRoute: () => FleetRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardOverviewRoute = DashboardOverviewImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => DashboardRoute,
} as any)

const ConfigureMapRoute = ConfigureMapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => ConfigureRoute,
} as any)

const ConfigureAutomationRoute = ConfigureAutomationImport.update({
  id: '/automation',
  path: '/automation',
  getParentRoute: () => ConfigureRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Configure': {
      id: '/Configure'
      path: '/Configure'
      fullPath: '/Configure'
      preLoaderRoute: typeof ConfigureImport
      parentRoute: typeof rootRoute
    }
    '/Contact': {
      id: '/Contact'
      path: '/Contact'
      fullPath: '/Contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/Dashboard': {
      id: '/Dashboard'
      path: '/Dashboard'
      fullPath: '/Dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/Fleet': {
      id: '/Fleet'
      path: '/Fleet'
      fullPath: '/Fleet'
      preLoaderRoute: typeof FleetImport
      parentRoute: typeof rootRoute
    }
    '/Login': {
      id: '/Login'
      path: '/Login'
      fullPath: '/Login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/Configure/automation': {
      id: '/Configure/automation'
      path: '/automation'
      fullPath: '/Configure/automation'
      preLoaderRoute: typeof ConfigureAutomationImport
      parentRoute: typeof ConfigureImport
    }
    '/Configure/map': {
      id: '/Configure/map'
      path: '/map'
      fullPath: '/Configure/map'
      preLoaderRoute: typeof ConfigureMapImport
      parentRoute: typeof ConfigureImport
    }
    '/Dashboard/overview': {
      id: '/Dashboard/overview'
      path: '/overview'
      fullPath: '/Dashboard/overview'
      preLoaderRoute: typeof DashboardOverviewImport
      parentRoute: typeof DashboardImport
    }
    '/Dashboard/settings': {
      id: '/Dashboard/settings'
      path: '/settings'
      fullPath: '/Dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof DashboardImport
    }
    '/Fleet/addRobot': {
      id: '/Fleet/addRobot'
      path: '/addRobot'
      fullPath: '/Fleet/addRobot'
      preLoaderRoute: typeof FleetAddRobotImport
      parentRoute: typeof FleetImport
    }
    '/Configure/': {
      id: '/Configure/'
      path: '/'
      fullPath: '/Configure/'
      preLoaderRoute: typeof ConfigureIndexImport
      parentRoute: typeof ConfigureImport
    }
    '/Dashboard/': {
      id: '/Dashboard/'
      path: '/'
      fullPath: '/Dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/Fleet/': {
      id: '/Fleet/'
      path: '/'
      fullPath: '/Fleet/'
      preLoaderRoute: typeof FleetIndexImport
      parentRoute: typeof FleetImport
    }
  }
}

// Create and export the route tree

interface ConfigureRouteChildren {
  ConfigureAutomationRoute: typeof ConfigureAutomationRoute
  ConfigureMapRoute: typeof ConfigureMapRoute
  ConfigureIndexRoute: typeof ConfigureIndexRoute
}

const ConfigureRouteChildren: ConfigureRouteChildren = {
  ConfigureAutomationRoute: ConfigureAutomationRoute,
  ConfigureMapRoute: ConfigureMapRoute,
  ConfigureIndexRoute: ConfigureIndexRoute,
}

const ConfigureRouteWithChildren = ConfigureRoute._addFileChildren(
  ConfigureRouteChildren,
)

interface DashboardRouteChildren {
  DashboardOverviewRoute: typeof DashboardOverviewRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardOverviewRoute: DashboardOverviewRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface FleetRouteChildren {
  FleetAddRobotRoute: typeof FleetAddRobotRoute
  FleetIndexRoute: typeof FleetIndexRoute
}

const FleetRouteChildren: FleetRouteChildren = {
  FleetAddRobotRoute: FleetAddRobotRoute,
  FleetIndexRoute: FleetIndexRoute,
}

const FleetRouteWithChildren = FleetRoute._addFileChildren(FleetRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Configure': typeof ConfigureRouteWithChildren
  '/Contact': typeof ContactRoute
  '/Dashboard': typeof DashboardRouteWithChildren
  '/Fleet': typeof FleetRouteWithChildren
  '/Login': typeof LoginRoute
  '/Configure/automation': typeof ConfigureAutomationRoute
  '/Configure/map': typeof ConfigureMapRoute
  '/Dashboard/overview': typeof DashboardOverviewRoute
  '/Dashboard/settings': typeof DashboardSettingsRoute
  '/Fleet/addRobot': typeof FleetAddRobotRoute
  '/Configure/': typeof ConfigureIndexRoute
  '/Dashboard/': typeof DashboardIndexRoute
  '/Fleet/': typeof FleetIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Contact': typeof ContactRoute
  '/Login': typeof LoginRoute
  '/Configure/automation': typeof ConfigureAutomationRoute
  '/Configure/map': typeof ConfigureMapRoute
  '/Dashboard/overview': typeof DashboardOverviewRoute
  '/Dashboard/settings': typeof DashboardSettingsRoute
  '/Fleet/addRobot': typeof FleetAddRobotRoute
  '/Configure': typeof ConfigureIndexRoute
  '/Dashboard': typeof DashboardIndexRoute
  '/Fleet': typeof FleetIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Configure': typeof ConfigureRouteWithChildren
  '/Contact': typeof ContactRoute
  '/Dashboard': typeof DashboardRouteWithChildren
  '/Fleet': typeof FleetRouteWithChildren
  '/Login': typeof LoginRoute
  '/Configure/automation': typeof ConfigureAutomationRoute
  '/Configure/map': typeof ConfigureMapRoute
  '/Dashboard/overview': typeof DashboardOverviewRoute
  '/Dashboard/settings': typeof DashboardSettingsRoute
  '/Fleet/addRobot': typeof FleetAddRobotRoute
  '/Configure/': typeof ConfigureIndexRoute
  '/Dashboard/': typeof DashboardIndexRoute
  '/Fleet/': typeof FleetIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Configure'
    | '/Contact'
    | '/Dashboard'
    | '/Fleet'
    | '/Login'
    | '/Configure/automation'
    | '/Configure/map'
    | '/Dashboard/overview'
    | '/Dashboard/settings'
    | '/Fleet/addRobot'
    | '/Configure/'
    | '/Dashboard/'
    | '/Fleet/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Contact'
    | '/Login'
    | '/Configure/automation'
    | '/Configure/map'
    | '/Dashboard/overview'
    | '/Dashboard/settings'
    | '/Fleet/addRobot'
    | '/Configure'
    | '/Dashboard'
    | '/Fleet'
  id:
    | '__root__'
    | '/'
    | '/Configure'
    | '/Contact'
    | '/Dashboard'
    | '/Fleet'
    | '/Login'
    | '/Configure/automation'
    | '/Configure/map'
    | '/Dashboard/overview'
    | '/Dashboard/settings'
    | '/Fleet/addRobot'
    | '/Configure/'
    | '/Dashboard/'
    | '/Fleet/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConfigureRoute: typeof ConfigureRouteWithChildren
  ContactRoute: typeof ContactRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  FleetRoute: typeof FleetRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConfigureRoute: ConfigureRouteWithChildren,
  ContactRoute: ContactRoute,
  DashboardRoute: DashboardRouteWithChildren,
  FleetRoute: FleetRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Configure",
        "/Contact",
        "/Dashboard",
        "/Fleet",
        "/Login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Configure": {
      "filePath": "Configure.tsx",
      "children": [
        "/Configure/automation",
        "/Configure/map",
        "/Configure/"
      ]
    },
    "/Contact": {
      "filePath": "Contact.tsx"
    },
    "/Dashboard": {
      "filePath": "Dashboard.tsx",
      "children": [
        "/Dashboard/overview",
        "/Dashboard/settings",
        "/Dashboard/"
      ]
    },
    "/Fleet": {
      "filePath": "Fleet.tsx",
      "children": [
        "/Fleet/addRobot",
        "/Fleet/"
      ]
    },
    "/Login": {
      "filePath": "Login.tsx"
    },
    "/Configure/automation": {
      "filePath": "Configure/automation.tsx",
      "parent": "/Configure"
    },
    "/Configure/map": {
      "filePath": "Configure/map.tsx",
      "parent": "/Configure"
    },
    "/Dashboard/overview": {
      "filePath": "Dashboard/overview.tsx",
      "parent": "/Dashboard"
    },
    "/Dashboard/settings": {
      "filePath": "Dashboard/settings.tsx",
      "parent": "/Dashboard"
    },
    "/Fleet/addRobot": {
      "filePath": "Fleet/addRobot.tsx",
      "parent": "/Fleet"
    },
    "/Configure/": {
      "filePath": "Configure/index.tsx",
      "parent": "/Configure"
    },
    "/Dashboard/": {
      "filePath": "Dashboard/index.tsx",
      "parent": "/Dashboard"
    },
    "/Fleet/": {
      "filePath": "Fleet/index.tsx",
      "parent": "/Fleet"
    }
  }
}
ROUTE_MANIFEST_END */
